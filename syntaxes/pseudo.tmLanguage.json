{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "pseudo",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#numeric-literal"
    },
    {
      "include": "#boolean-literal"
		}
	],
	"repository": {
		"keywords": {
      "patterns": [
        {
          "name": "storage.type.pseudo",
          "match": "(?i:\\b(SEQUENCE|USING|RETURN|ENDSEQUENCE|END SEQUENCE)\\b)",
          "comment": "A linear progression where one task is performed sequentially after another. "
        },
        {
          "name": "storage.type.pseudo",
          "match": "(?i:\\b(DEFINE|INSTANTIATE|ENDDEFINE|END DEFINE)\\b)",
          "comment": "A description of an object and it's instantiation"
        },
        {
          "match": "(?i:\\b(WHILE|ENDWHILE)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "A loop (repetition) with a simple conditional test at its beginning."
        },
        {
          "match": "(?i:\\b(IF|THEN|ELSE|ELSE IF|ENDIF)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "A decision (selection) in which a choice is made between two alternative courses of action."
        },
        {
          "match": "(?i:\\b(REPEAT|UNTIL)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "A loop with a simple conditional test at the bottom."
        },
        {
          "match": "(?i:\\b(CASE|OF|OTHERS|ENDCASE)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "A multiway branch (decision) based on the value of an expression. CASE is a generalization of IF-THEN-ELSE."
        },
        {
          "match": "(?i:\\b(FOR|ENDFOR)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "A counting loop/iterate over a list"
        },
        {
          "match": "(?i:\\b(READ|OBTAIN|GET)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "Input keywords"
        },
        {
          "match": "(?i:\\b(PRINT|DISPLAY|SHOW)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "Output keywords"
        },
        {
          "match": "(?i:\\b(COMPUTE|CALCULATE|DETERMINE)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "Compute keywords"
        },
        {
          "name": "keyword.control.pseudo",
          "match": "(?i:\\b(SET|TO|INIT)\\b)",
          "comment": "Initialize keywords"
        },
        {
          "name": "keyword.control.pseudo",
          "match": "(?i:\\b(INCREMENT|BUMP|ADD)\\b)",
          "comment": "Add one/increment keywords"
        },
        {
          "name": "keyword.control.pseudo",
          "match": "(?i:\\b(BEGIN|EXCEPTION|WHEN|RAISE)\\b)",
          "comment": "Error handling"
        },

        {
          "match": "(?i:\\b(END IF|END WHILE|END FOR)\\b)",
          "name": "keyword.control.pseudo",
          "comment": "This is for common mistakes, should be invalid.illegal.pseudo"
        },

        {
          "match": "(?i:\\b(IF|THEN|ELSE|ELSE IF|END IF|WHILE|FOR|TO|EACH|END FOR|RETURN|CONTINUE|Do|Until|Loop|Next|With|Exit Do|Exit For|Exit Function|Exit Property|Exit Sub|IIf)\\b)",
          "name": "keyword.control.pseudo"
        },
        {
          "name": "keyword.control.pseudo",
          "match": "(?i:\\b(READ|FROM)\\b)"
        },
        {
          "name": "keyword.control.pseudo",
          "match": "(?i:\\b(CALL|WITH|RETURNING|EACH|THEN|RETURN)\\b)"
        },
        {
          "name": "keyword.operator.comparison.pseudo",
          "match": "<=>|<=|>=|<|>|="
        },
        {
          "name": "keyword.operator.comparison.pseudo",
          "match": "(?i:\\b(IS|IS NOT|EQUAL|NOT EQUAL|IN|AND)\\b)"
        },
        {
          "match": "(?i:\\s*\\b(EMPTY|FALSE|NOTHING|NULL|TRUE)\\b)",
          "name": "constant.language.pseudo"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.function.pseudo"
            }
          },
          "match": "(?i:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)(?=\\(\\)?))",
          "name": "support.function.pseudo"
        },
        {
          "begin": "(^[ \\t]+)?(?=')",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.pseudo"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.pseudo"
                }
              },
              "end": "\\n",
              "name": "comment.line.apostrophe.pseudo"
            }
          ]
        }
      ]
    },
		"strings": {
			"name": "string.quoted.double.pseudo",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.pseudo",
					"match": "\\\\."
				}
			]
        },
        "comment": {
            "patterns": [
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.js"
                        },
                        "2": {
                            "name": "comment.line.double-slash.js"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.js"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.js"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.js"
                        }
                    },
                    "end": "(?=$)",
                    "contentName": "comment.line.double-slash.js"
                },
				{
					"name": "comment.block.js",
					"begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.js"
						},
						"2": {
							"name": "storage.type.internaldeclaration.js"
						},
						"3": {
							"name": "punctuation.decorator.internaldeclaration.js"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.js"
						}
					}
				}
            ]
        },
        "numeric-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.js",
                    "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$)"
                },
                {
                    "name": "constant.numeric.binary.js",
                    "match": "\\b(?<!\\$)0(b|B)[01][01_]*\\b(?!\\$)"
                },
                {
                    "name": "constant.numeric.octal.js",
                    "match": "\\b(?<!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$)"
                },
                {
                    "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.js"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period.js"
                        },
                        "2": {
                            "name": "meta.delimiter.decimal.period.js"
                        },
                        "3": {
                            "name": "meta.delimiter.decimal.period.js"
                        },
                        "4": {
                            "name": "meta.delimiter.decimal.period.js"
                        },
                        "5": {
                            "name": "meta.delimiter.decimal.period.js"
                        },
                        "6": {
                            "name": "meta.delimiter.decimal.period.js"
                        }
                    }
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.js",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "constant.language.boolean.false.js",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                }
            ]
        }
	},
	"scopeName": "source.pseudo"
}